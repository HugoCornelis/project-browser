#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


# BEGIN
# {
#     # during tests

#     push @INC, '../glue/swig/perl';

#     # during distcheck

#     push @INC, '../../glue/swig/perl';

#     # after installation

#     push @INC, '/usr/local/glue/swig/perl';
# }


# BEGIN
# {
#     # for main during tests

#     push @INC, 'tests/glue/swig/perl';

#     # for main during check

#     push @INC, './glue/swig/perl';

#     # for main during distcheck

#     push @INC, '../../tests/glue/swig/perl';
# }


use Getopt::Long;

use YAML;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


our $option_verbose;

my $exit_code = 0;


my $project_directories
    = [
       {
	description => 'directory with subdirectories with reconstructed neuronal morphologies',
	directory => 'morphologies',
	related => [
		    {
		     description => 'morphology_groups',
		     directory => 'morphology_groups',
		    },
		    {
		     description => 'network_groups',
		     directory => 'network_groups',
		    },
		    {
		     description => 'kinetic_groups',
		     directory => 'kinetic_groups',
		    },
		   ],
       },
       {
	description => 'database that groups reconstructed neuronal morphologies for further analysis',
	directory => 'morphology_groups',
       },
       {
	description => 'database with simulation definitions',
	directory => 'modules',
       },
       {
	description => 'free style pictures',
	directory => 'pictures',
       },
       {
	description => 'scripts for analysis',
	directory => 'scripts',
       },
       {
	description => 'output of analysis scripts',
	directory => 'scripts/output',
       },
       {
	description => 'colormaps of morphologies',
	directory => 'colormaps',
       },
       {
	description => 'narrative overview of the project',
	directory => 'narrative_components',
       },
       {
	description => 'summary notes of project progress',
	directory => 'summary',
       },
       {
	description => 'papers related to this project',
	directory => 'papers',
       },
       {
	description => 'models private to this project',
	directory => 'models',
       },
       {
	description => 'project component replicator',
	directory => 'replicator',
       },
      ];

sub main
{
    read_cmd_line();

    # nothing here yet.

    #t figure out project name, $option_project

    #t count existing modules

    #t create directories

    #t fill in description
}


sub read_cmd_line
{
    my $option_help;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "help!" => \$option_help,
	     "v|verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if ($option_version)
    {
	my $version = version();

	print $version . "\n";

	exit 1;
    }

    if ($option_help)
    {
	print
	    "
$0 <options>

$0: create a new neurospaces project-browser simulation module

options:
    help               print usage information.
    verbose            set verbosity level.
    version            give version information.
";

	exit 1;
    }

}


sub version
{
    # $Format: "    my $version=\"${package}-${label}\";"$
    my $version="project-browser-python-2";

    return $version;
}


main();


exit $exit_code;


